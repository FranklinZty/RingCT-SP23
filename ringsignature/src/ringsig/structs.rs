use crate::commitment::CommitmentScheme;
use ark_ec::CurveGroup;

#[derive(Clone, Debug, Default, Eq, PartialEq)]
pub struct Openings<C: CurveGroup> {
    pub zeta: Vec<C::ScalarField>,
    pub eta: Vec<C::ScalarField>,
    pub hat_t: C::ScalarField,
    pub taux: C::ScalarField,
    pub mu: C::ScalarField,
    pub fs: C::ScalarField,
}

#[derive(Clone, Debug, Default, Eq, PartialEq)]
pub struct RingSignature<C: CurveGroup, COM: CommitmentScheme<C>> {
    // the intermediate commitment vector generated along the proving
    pub commitments: Vec<COM::Commitment>,
    // the opening vector generated along the proving
    pub openings: Openings<C>,
    // the challenge vector generated by merlin transcript
    pub challenges: Vec<C::ScalarField>,
    // the digest of the message
    pub digest: String,
}

#[derive(Clone, Debug, Default, Eq, PartialEq)]
pub struct RingSignatureParams<C: CurveGroup, COM: CommitmentScheme<C>> {
    // the number of witness elements
    pub num_witness: usize,
    // the number of public inputs (commitments)
    pub num_pub_inputs: usize,
    // the generators for commitments
    pub com_parameters: (COM::PublicParams, COM::PublicParams, COM::PublicParams),
    // the signed message
    pub message: String,
    // public key vector
    pub vec_pk: Vec<C::Affine>,
}